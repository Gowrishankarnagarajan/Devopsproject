name: Terraform Provision & Deploy

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  provision-infra:
    name: Provision ACR Infrastructure
    runs-on: ubuntu-latest

    outputs:
      acr_login_server: ${{ steps.acr_output.outputs.acr_login_server }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform -chdir=terraform/infra init

      - name: Terraform Apply Infra
        run: terraform -chdir=terraform/infra apply -auto-approve

      - name: Get ACR Login Server
        id: acr_output
        run: |
          set -euo pipefail
          # Capture all output (stdout and stderr) from Terraform.
          RAW_ACR_OUTPUT=$(terraform -chdir=terraform/infra output -raw acr_login_server 2>&1)
          
          # Process the raw output to ensure a clean, single line:
          # 1. Remove carriage returns (tr -d '\r').
          # 2. Take only the first line (head -n 1). This is crucial if Terraform or the environment
          #    is unexpectedly printing multiple lines.
          # 3. Use 'cut -d':' -f1' to handle any potential '::debug::' or similar prefixes,
          #    making the extraction robust even if such prefixes reappear.
          ACR_NAME=$(echo "$RAW_ACR_OUTPUT" | tr -d '\r' | head -n 1 | cut -d':' -f1)
          
          # Write the key-value pair to GITHUB_OUTPUT.
          # Using printf for explicit newline control is generally safer than echo.
          printf "acr_login_server=%s\n" "$ACR_NAME" >> "$GITHUB_OUTPUT"

      - name: Debug ACR Login Server
        run: echo "::notice::ACR is ${{ steps.acr_output.outputs.acr_login_server }}"

  push-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: provision-infra

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Build & Push
        run: |
          set -euxo pipefail
          ACR="${{ needs.provision-infra.outputs.acr_login_server }}"
          # Extract ACR name for 'az acr login'
          ACR_NAME=$(echo "$ACR" | cut -d. -f1)
          az acr login --name "$ACR_NAME"
          docker build -t "$ACR/ingestion:latest" ./sourcecode/ingestion
          docker push "$ACR/ingestion:latest"

  deploy-apps:
    name: Deploy Container App
    runs-on: ubuntu-latest
    needs: push-image

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init & Apply
        run: |
          set -euxo pipefail
          terraform -chdir=terraform/apps init
          terraform -chdir=terraform/apps apply -auto-approve -var="acr_login_server=${{ needs.provision-infra.outputs.acr_login_server }}"
