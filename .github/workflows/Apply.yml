# .github/workflows/Apply.yml
name: Terraform Provision & Deploy Container Apps

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write # Required for Azure Login with OIDC (though 'creds' is used below)

jobs:
  provision-infra:
    name: Provision Core Infrastructure
    runs-on: ubuntu-latest

    outputs:
      acr_login_server: ${{ steps.acr_output.outputs.acr_login_server }}
      resource_group_name: ${{ steps.rg_output.outputs.resource_group_name }}
      location: ${{ steps.location_output.outputs.location }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          # Using the 'creds' approach as requested.
          # Ensure ${{ secrets.AZURE_CREDENTIALS }} is configured in your repository secrets.
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0 # Or your desired version

      - name: Terraform Init (Infra)
        run: terraform -chdir=terraform/infra init

      - name: Terraform Plan (Infra)
        run: terraform -chdir=terraform/infra plan -out=infra.tfplan

      - name: Terraform Apply (Infra)
        run: terraform -chdir=terraform/infra apply -auto-approve infra.tfplan

      # --- Output Retrieval Steps for Infra (modified as requested) ---
      - name: Get ACR Login Server
        id: acr_output
        run: |
          set -euo pipefail
          FULL_COMMAND_OUTPUT=$(terraform -chdir=terraform/infra output -raw acr_login_server 2>&1)
          echo "::debug::FULL_COMMAND_OUTPUT captured: '$FULL_COMMAND_OUTPUT'"
          ACR_NAME=$(echo "$FULL_COMMAND_OUTPUT" | grep -oE '[a-zA-Z0-9.-]+\.azurecr\.io' | head -n 1)
          echo "::debug::ACR_NAME extracted after regex: '$ACR_NAME'"
          printf "acr_login_server=%s\n" "$ACR_NAME" >> "$GITHUB_OUTPUT"
          echo "::debug::Content written to GITHUB_OUTPUT file:"
          cat "$GITHUB_OUTPUT"

      - name: Debug ACR Login Server
        run: echo "::notice::ACR is ${{ steps.acr_output.outputs.acr_login_server }}"

      - name: Get Resource Group Name Output
        id: rg_output
        run: echo "resource_group_name=$(terraform -chdir=terraform/infra output -raw resource_group_name)" >> "$GITHUB_OUTPUT"

      - name: Get Location Output
        id: location_output
        run: echo "location=$(terraform -chdir=terraform/infra output -raw location)" >> "$GITHUB_OUTPUT"

  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: provision-infra # Depends on infra to get ACR login server
    outputs:
      ingestion_image: ${{ steps.ingestion_image.outputs.image }}
      workflow_image: ${{ steps.workflow_image.outputs.image }}
      package_image: ${{ steps.package_image.outputs.image }}
      drone_scheduler_image: ${{ steps.drone_scheduler_image.outputs.image }}
      delivery_image: ${{ steps.delivery_image.outputs.image }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set ACR Variable
        run: |
          set -euo pipefail
          # Capture the output from provision-infra job
          ACR_SERVER_FROM_OUTPUT="${{ needs.provision-infra.outputs.acr_login_server }}"
          
          # Verify that the value is not empty
          if [ -z "$ACR_SERVER_FROM_OUTPUT" ]; then
            echo "::error::ACR_LOGIN_SERVER output from 'provision-infra' job is empty. Cannot proceed with Docker login."
            exit 1
          fi
          
          # Set the environment variable
          echo "ACR_LOGIN_SERVER=$ACR_SERVER_FROM_OUTPUT" >> "$GITHUB_ENV"
          echo "::debug::ACR_LOGIN_SERVER set in GITHUB_ENV: $ACR_SERVER_FROM_OUTPUT"

      - name: Docker Login to ACR
        run: |
          set -euo pipefail
          echo "::debug::Attempting Docker login with ACR_LOGIN_SERVER: '$ACR_LOGIN_SERVER'"
          ACR_NAME=$(echo "$ACR_LOGIN_SERVER" | cut -d. -f1)
          az acr login --name "$ACR_NAME"

      # ... (rest of the build-and-push-images job steps)
      - name: Set Image Tag
        id: set_image_tag
        run: echo "IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)" >> "$GITHUB_ENV"

      - name: Build and Push Ingestion Image
        id: ingestion_image
        run: |
          docker build -t ${{ needs.provision-infra.outputs.acr_login_server }}/ingestion-service:${{ env.IMAGE_TAG }} ./src/ingestion-service
          docker push ${{ needs.provision-infra.outputs.acr_login_server }}/ingestion-service:${{ env.IMAGE_TAG }}
          echo "image=${{ needs.provision-infra.outputs.acr_login_server }}/ingestion-service:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"

      - name: Build and Push Workflow Image
        id: workflow_image
        run: |
          docker build -t ${{ needs.provision-infra.outputs.acr_login_server }}/workflow-service:${{ env.IMAGE_TAG }} ./src/workflow-service
          docker push ${{ needs.provision-infra.outputs.acr_login_server }}/workflow-service:${{ env.IMAGE_TAG }}
          echo "image=${{ needs.provision-infra.outputs.acr_login_server }}/workflow-service:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"

      - name: Build and Push Package Image
        id: package_image
        run: |
          docker build -t ${{ needs.provision-infra.outputs.acr_login_server }}/package-service:${{ env.IMAGE_TAG }} ./src/package-service
          docker push ${{ needs.provision-infra.outputs.acr_login_server }}/package-service:${{ env.IMAGE_TAG }}
          echo "image=${{ needs.provision-infra.outputs.acr_login_server }}/package-service:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"

      - name: Build and Push Drone Scheduler Image
        id: drone_scheduler_image
        run: |
          docker build -t ${{ needs.provision-infra.outputs.acr_login_server }}/drone-scheduler-service:${{ env.IMAGE_TAG }} ./src/drone-scheduler-service
          docker push ${{ needs.provision-infra.outputs.acr_login_server }}/drone-scheduler-service:${{ env.IMAGE_TAG }}
          echo "image=${{ needs.provision-infra.outputs.acr_login_server }}/drone-scheduler-service:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"

      - name: Build and Push Delivery Image
        id: delivery_image
        run: |
          docker build -t ${{ needs.provision-infra.outputs.acr_login_server }}/delivery-service:${{ env.IMAGE_TAG }} ./src/delivery-service
          docker push ${{ needs.provision-infra.outputs.acr_login_server }}/delivery-service:${{ env.IMAGE_TAG }}
          echo "image=${{ needs.provision-infra.outputs.acr_login_server }}/delivery-service:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"

  deploy-apps:
    name: Deploy Container Apps
    runs-on: ubuntu-latest
    needs: [provision-infra, build-and-push-images] # Ensure infra and images are ready

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Using 'creds' here too for consistency

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0 # Or your desired version

      - name: Set Resource Group Name Prefix
        id: set_rg_prefix
        run: echo "RESOURCE_GROUP_NAME_PREFIX=$(echo "${{ needs.provision-infra.outputs.resource_group_name }}" | sed 's/aca-rg-//')" >> "$GITHUB_OUTPUT"

      - name: Terraform Init (Apps)
        run: terraform -chdir=terraform/apps init

      - name: Terraform Plan (Apps)
        run: |
          terraform -chdir=terraform/apps plan -out=apps.tfplan \
            -var="location=${{ needs.provision-infra.outputs.location }}" \
            -var="resource_group_name=${{ needs.provision-infra.outputs.resource_group_name }}" \
            -var="resource_group_name_prefix=${{ steps.set_rg_prefix.outputs.RESOURCE_GROUP_NAME_PREFIX }}" \
            -var="acr_login_server=${{ needs.provision-infra.outputs.acr_login_server }}" \
            -var="ingestion_image=${{ needs.build-and-push-images.outputs.ingestion_image }}" \
            -var="workflow_image=${{ needs.build-and-push-images.outputs.workflow_image }}" \
            -var="package_image=${{ needs.build-and-push-images.outputs.package_image }}" \
            -var="drone_scheduler_image=${{ needs.build-and-push-images.outputs.drone_scheduler_image }}" \
            -var="delivery_image=${{ needs.build-and-push-images.outputs.delivery_image }}"

      - name: Terraform Apply (Apps)
        run: terraform -chdir=terraform/apps apply -auto-approve apps.tfplan

      - name: Get Ingestion App FQDN
        run: |
          set -euo pipefail # Kept for robustness
          INGESTION_FQDN=$(terraform -chdir=terraform/apps output -raw ingestion_fqdn)
          echo "Ingestion App FQDN: $INGESTION_FQDN"
          echo "INGESTION_FQDN=$INGESTION_FQDN" >> "$GITHUB_ENV"