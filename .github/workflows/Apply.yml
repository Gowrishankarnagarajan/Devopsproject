name: Terraform Provision & Deploy

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  provision-infra:
    name: Provision ACR Infrastructure
    runs-on: ubuntu-latest

    outputs:
      acr_login_server: ${{ steps.acr_output.outputs.acr_login_server }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform -chdir=terraform/infra init

      - name: Terraform Apply Infra
        run: terraform -chdir=terraform/infra apply -auto-approve

      - name: Get ACR Login Server
        id: acr_output
        run: |
          set -euo pipefail
          
          # Capture all output (stdout and stderr) from the direct binary execution.
          # We explicitly use "$TERRAFORM_CLI_PATH"/terraform-bin to ensure we're running
          # the core executable, not a shell alias or wrapper that might add extra text.
          FULL_COMMAND_OUTPUT=$("$TERRAFORM_CLI_PATH"/terraform-bin -chdir=terraform/infra output -raw acr_login_server 2>&1)
          
          # Debug: Print the full raw output captured from the command.
          echo "::debug::FULL_COMMAND_OUTPUT captured: '$FULL_COMMAND_OUTPUT'"

          # Extract the ACR login server using grep with a regular expression.
          # -oE: Prints only the matched parts, extended regex.
          # '[a-zA-Z0-9.-]+\.azurecr\.io': This regex specifically matches domain names
          #    ending in '.azurecr.io', which is the expected format for ACR login servers.
          # head -n 1: Ensures only the first match is taken, in case multiple lines
          #    contain similar patterns (highly unlikely for this specific output).
          ACR_NAME=$(echo "$FULL_COMMAND_OUTPUT" | grep -oE '[a-zA-Z0-9.-]+\.azurecr\.io' | head -n 1)
          
          # Debug: Print the extracted ACR_NAME after regex filtering.
          echo "::debug::ACR_NAME extracted after regex: '$ACR_NAME'"
          
          # Write the key-value pair to GITHUB_OUTPUT.
          # Using printf for explicit newline control is generally safer.
          # We are no longer adding quotes here, as the regex should provide a clean value,
          # and adding quotes might cause issues with GitHub Actions' internal parsing
          # if it expects a raw string.
          printf "acr_login_server=%s\n" "$ACR_NAME" >> "$GITHUB_OUTPUT"
          
          # Debug: Show the exact content that was written to GITHUB_OUTPUT file.
          echo "::debug::Content written to GITHUB_OUTPUT file:"
          cat "$GITHUB_OUTPUT"

      - name: Debug ACR Login Server
        run: echo "::notice::ACR is ${{ steps.acr_output.outputs.acr_login_server }}"

  push-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: provision-infra

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Build & Push
        run: |
          set -euxo pipefail
          # The ACR variable should now correctly receive the clean string from the previous job's output.
          ACR="${{ needs.provision-infra.outputs.acr_login_server }}"
          
          # Debug: Print the value of ACR received in this job.
          echo "::debug::ACR received in push-image job: '$ACR'"
          
          # No need for sed 's/"//g' or CLEAN_ACR if the output is consistently clean now.
          # Use ACR directly as it should contain just the domain.
          
          # Extract ACR name for 'az acr login' (e.g., "gsacrsfx7ou" from "gsacrsfx7ou.azurecr.io")
          ACR_NAME=$(echo "$ACR" | cut -d. -f1)
          
          az acr login --name "$ACR_NAME"
          docker build -t "$ACR/ingestion:latest" ./sourcecode/ingestion
          docker push "$ACR/ingestion:latest"

  deploy-apps:
    name: Deploy Container App
    runs-on: ubuntu-latest
    needs: push-image

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init & Apply
        run: |
          set -euxo pipefail
          terraform -chdir=terraform/apps init
          terraform -chdir=terraform/apps apply -auto-approve -var="acr_login_server=${{ needs.provision-infra.outputs.acr_login_server }}"
